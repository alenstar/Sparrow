//父类
class Person {
  name_ = nil
  
  def init(name) {
    name_ = name
  }

  def get_name() {
    return name_  
  }

  def set_name(new_name) {
    name_ = new_name  
  }

  def info() {
    print("name: ")
    printLine(name_)  
  }
}

//子类，继承Person类
class Student extends Person {
  stu_id_ = nil 

  def init(name, stu_id) {
    super.init(name)
    stu_id_ = stu_id  
  }

  def get_stu_id() {
    return stu_id_  
  }

  def set_stu_id(new_id) {
    stu_id_ = new_id  
  }

  def info() {
    //调用父类同名方法要用super关键字  
    super.info()
    print("student id: ")
    printLine(stu_id_)
  }
}

def main() {
  //初始化一个Student实例并打印它的信息
  zhu = Student.new("Sparrow", 9991)  
  zhu.info()

  //修改刚才初始化的对象的值，并打印它的信息
  printLine("modify name to SparrowX, student id to 9992")
  zhu.set_name("SparrowX")
  zhu.set_stu_id(9992)
  zhu.info()

  //当为对象一个不存在的成员赋值时，会为对象创建新的成员
  //甚至是函数
  zhu.id_ = 110
  printLine(zhu.id_)
  zhu.add_one = lamb(num) {
      printLine(num + 1)
    }
  zhu.add_one(2)
}
