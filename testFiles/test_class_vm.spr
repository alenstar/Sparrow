//该文件用来测试语言的类

class Foo {
  
  foo_ = nil  

  def init(foo) {
    foo_ = foo  
  }
}

class Person {
  //姓名
  name_ = nil
  
  //年龄
  age_ = nil
  
  //性别
  sex_ = nil  

  //测试对象中使用对象
  otherInstance_ = nil

  def init(name, age, sex) {
    name_ = name
    age_ = age
    sex_ = sex  
    otherInstance_ = Foo.new("foo")
  }

  def get_age() {
    return age_  
  }

  def set_age(age) {
    age_ = age  
  }
}

class Student extends Person {
  //学号
  student_id_ = 000

  //测试同名成员
  name_ = "Student"
  
  def init(name, age, sex, stu_id) {
    super.init(name, age, sex)
    student_id_ = stu_id
  }  

  //测试同名函数
  def set_age(age) {
    //不需要做任何事，使得修改age失效  
  }

  //测试使用父类成员
  def set_sex(sex) {
    sex_ = sex  
  }
}

def main() {

print("==========")
print("【虚拟机】测试类")

z = Student.new("zzp", 22, "man", 123)

//访问成员
if z.name_ != "Student" {
  print("failed 1")  
  print(z.name_)
} else {
  print("success 1")  
}

if z.age_ != 22 {
  print("failed 2")  
} else {
  print("success 2")  
}

if z.sex_ != "man" {
  print("failed 3")  
} else {
  print("success 3")
}

if z.student_id_ != 123 {
  print("failed 4")  
} else {
  print("success 4")  
}

//调用父类方法
if z.get_age() != 22 {
  print("failed 5")  
} else {
  print("success 5")  
}

//访问同名方法
z.set_age(100)
if z.get_age() != 22 {
  print("failed 6")  
} else {
  print("success 6")  
}

//使用父类成员
z.set_sex("boy")
if z.sex_ != "boy" {
  print("failed 7")  
  print(z.sex_)
} else {
  print("success 7")
}

//测试类中的类实例成员
if z.otherInstance_.foo_ != "foo" {
  print("failed 8")  
  print(z.otherInstance_.foo_)
} else {
  print("success 8")
}

print("==========")

}
